<?phpclass Cron_SessionEmailReminder{    public $Show_Query                          = false;    // TRUE = output the database queries    public $Show_Array                          = false;    // TRUE = output the database query - resulting array    public $Show_Query_Result                   = true;     // TRUE = output the database query results        public $Allow_Execute                       = true;     // TRUE = allows cron to run    public $Send_Emails                         = true;     // TRUE = actually send the emails - to real person or test person    public $Update_Database                     = true;     // TRUE = updates database to mark sessions being sent    public $email_bcc_to_admin                  = true;     // TRUE = BCC the administrator a copy of the message        public $Send_Emails_As_Test                 = false;    // TRUE = send the emails to test person defined below    public $Update_Database_As_Test             = false;    // TRUE = set database to 3 instead of 1 indicating email has been sent    public $Send_First_Reminder_User            = true;     // TRUE = send a first reminder to user - based on First_Reminder_Before_Time    public $Send_First_Reminder_Instructor      = true;     // TRUE = send a first reminder to instructor - based on First_Reminder_Before_Time    public $Send_Second_Reminder_User           = true;     // TRUE = send a second reminder to user - based on Second_Reminder_Before_Time    public $Send_Second_Reminder_Instructor     = true;     // TRUE = send a second reminder to instructor - based on Second_Reminder_Before_Time    public $First_Reminder_Before_Time          = '24';     // given in hours - NOTE: cron must run more ofter than this number (i.e. if sending emails every hour - cron must run every 30 mins)    public $Second_Reminder_Before_Time         = '1';      // given in hours - NOTE: cron must run more ofter than this number (i.e. if sending emails every hour - cron must run every 30 mins)        public $instructor_email_template_id        = 15;                       // Email template ID - instructor    public $customer_email_template_id          = 15;                       // Email template ID - customer    public $Email_Test_To_Name                  = 'Yoga Test';              // Test email - to name    public $Email_Test_To_Email                 = 'richard@mailwh.com';     // Test email - to email address        public $utc_start_datetime_first_reminder   = '';    public $utc_start_datetime_second_reminder  = '';    public $OBJ_TIMEZONE                        = null;    public $SQL                                 = null;    public $Sessions                            = array();    public $Current_Session                     = array();    public $Output_Message                      = '';    public $Output_Message_Type                 = 'cron';        public function  __construct()    {        $this->ClassInfo = array(            'Created By'  => 'Richard Witherspoon',            'Created'     => '2011-01-01',            'Updated By'  => '',            'Created'     => '',            'Version'     => '1.0',            'Description' => 'Send session reminder emails',        );                $this->SQL                  = Lib_Singleton::GetInstance('Lib_Pdo');    // Get instance of database object - don't need if extending BaseClass        $this->OBJ_TIMEZONE         = new General_TimezoneConversion();         // Create timezone object        $this->Output_Message_Type  = (Get('echo')) ? 'echo' : 'cron';    }        public function Execute()     {        //$this->TestExecute();            $this->Output_Message .= "<br />To see output in HTML ==> ;echo<br /><br />";            if ($this->Allow_Execute) {            $this->GetAllSessions();            $this->ProcessRecords();        }                switch ($this->Output_Message_Type) {            case 'echo':                echo $this->Output_Message;            break;            case 'cron':                //$this->Output_Message = str_replace('<br />', ' \n ', $this->Output_Message);                $this->Output_Message = preg_replace('#<br\s*/?>#i', "\n", $this->Output_Message);                print $this->Output_Message;            break;        }                //print "This spans\nmultiple lines. The newlines will be\noutput as well.";            }            public function TestExecute()    {        /*        $input_date_time    = date("Y-m-d Hi");        $shift_string       = "+2 hour";        $output_format      = 'Y-m-d Hi';        $output = $this->OBJ_TIMEZONE->ShiftDateTime($input_date_time, $shift_string, $output_format, true);                        $input_date_time    = date("Y-m-d Hi");        $shift_string       = "+12 hour";        $output_format      = 'Y-m-d Hi';        $output = $this->OBJ_TIMEZONE->ShiftDateTime($input_date_time, $shift_string, $output_format, true);        */                /*        date_default_timezone_set('UTC');        $date_time_start                    //$date_time_end_1hr            = date('Y-m-d Hi');        //$date_time_end_12hr            = date('Y-m-d Hi');                $modify = "+2 hour";        //$modify = "+7 day";                        $date = new DateTime($date_time_start);        $date->modify($modify);        $output = $date->format("Y-m-d Hi");        */                        #echo "<br />date_time_start ==> $date_time_start";        #echo "<br />modify ==> $modify";        #echo "<br />output ==> $output";    }            public function GetAllSessions()    {        # everythings in database is stored in UTC so pull based on that.        # ======================================================================        date_default_timezone_set('UTC');                         # calculate now time in UTC        # ======================================================================        $now_date_time                      = date("Y-m-d H:i:s");                        # calculate times for first reminder        # ======================================================================        if ($this->Send_First_Reminder_User || $this->Send_First_Reminder_Instructor) {            $input_date_time                    = date("Y-m-d H:i:s");            $shift_string                       = "+{$this->First_Reminder_Before_Time} hour";            $output_format                      = 'Y-m-d H:i:s';            $utc_start_datetime_first_reminder  = $this->OBJ_TIMEZONE->ShiftDateTime($input_date_time, $shift_string, $output_format, false);            $this->utc_start_datetime_first_reminder = $utc_start_datetime_first_reminder;        }                        # calculate times for second reminder        # ======================================================================        if ($this->Send_Second_Reminder_User || $this->Send_Second_Reminder_Instructor) {            $input_date_time                    = date("Y-m-d H:i:s");            $shift_string                       = "+{$this->Second_Reminder_Before_Time} hour";            $output_format                      = 'Y-m-d H:i:s';            $utc_start_datetime_second_reminder = $this->OBJ_TIMEZONE->ShiftDateTime($input_date_time, $shift_string, $output_format, false);            $this->utc_start_datetime_second_reminder = $utc_start_datetime_second_reminder;        }                        # CREATE THE WHERE BASED ON EMAILS        # ======================================================================        $where = "";        $where .= " {$GLOBALS['TABLE_sessions']}.active=1 ";        // only get active events        $where .= " AND {$GLOBALS['TABLE_sessions']}.booked=1 ";    // only get booked sessions        $where .= " AND `utc_start_datetime`>'{$now_date_time}' ";    // only get events that have not already passed                if ($this->Send_First_Reminder_User || $this->Send_First_Reminder_Instructor || $this->Send_Second_Reminder_User || $this->Send_Second_Reminder_Instructor) {            $where .= " AND ( ";        }                $where_first_reminder = '';        if ($this->Send_First_Reminder_User || $this->Send_First_Reminder_Instructor) {            $where_first_reminder .= "( `utc_start_datetime`<'{$utc_start_datetime_first_reminder}' AND ( ";            $where_first_reminder .= ($this->Send_First_Reminder_User)         ? " CHECKLIST.email_reminder_1_user_sent=0 OR " : '';            $where_first_reminder .= ($this->Send_First_Reminder_Instructor)   ? " CHECKLIST.email_reminder_1_instructor_sent=0 OR " : '';            $where_first_reminder = substr($where_first_reminder, 0, -3); //striip off trailing 'OR'            $where_first_reminder .= " ) )";            $where .= " $where_first_reminder OR ";        }                $where_second_reminder = '';        if ($this->Send_Second_Reminder_User || $this->Send_Second_Reminder_Instructor) {            $where_second_reminder .= "( `utc_start_datetime`<'{$utc_start_datetime_first_reminder}' AND ( ";            $where_second_reminder .= ($this->Send_Second_Reminder_User)         ? " CHECKLIST.email_reminder_2_user_sent=0 OR " : '';            $where_second_reminder .= ($this->Send_Second_Reminder_Instructor)   ? " CHECKLIST.email_reminder_2_instructor_sent=0 OR " : '';            $where_second_reminder = substr($where_second_reminder, 0, -3); //striip off trailing 'OR'            $where_second_reminder .= " ) )";            $where .= " $where_second_reminder OR ";        }                if ($this->Send_First_Reminder_User || $this->Send_First_Reminder_Instructor || $this->Send_Second_Reminder_User || $this->Send_Second_Reminder_Instructor) {            $where = substr($where, 0, -3); //striip off trailing 'OR'            $where .= " ) ";        }                        # MAKE THE LIST OF KEYS NEED TO GET        # ======================================================================        $keys = "            {$GLOBALS['TABLE_sessions']}.sessions_id            AS SESSION_sessions_id,             {$GLOBALS['TABLE_sessions']}.instructor_id          AS instructor_wh_id,             {$GLOBALS['TABLE_sessions']}.utc_start_datetime     AS SESSION_utc_start_datetime,             {$GLOBALS['TABLE_sessions']}.utc_end_datetime       AS SESSION_utc_end_datetime,                         CUSTOMER.wh_id                                      AS CUSTOMER_wh_id,             CUSTOMER.first_name                                 AS CUSTOMER_first_name,             CUSTOMER.last_name                                  AS CUSTOMER_last_name,             CUSTOMER.email_address                              AS CUSTOMER_email_address,             CUSTOMER_TZ.tz_name                                 AS CUSTOMER_timezone_name,             CUSTOMER_TZ.tz_display                              AS CUSTOMER_timezone_display,                         INSTRUCTOR.wh_id                                    AS INSTRUCTOR_wh_id,             INSTRUCTOR.first_name                               AS INSTRUCTOR_first_name,             INSTRUCTOR.last_name                                AS INSTRUCTOR_last_name,             INSTRUCTOR.email_address                            AS INSTRUCTOR_email_address,            INSTRUCTOR_TZ.tz_name                               AS INSTRUCTOR_timezone_name,             INSTRUCTOR_TZ.tz_display                            AS INSTRUCTOR_timezone_display,                         CHECKLIST.email_reminder_1_user_sent                AS CHECKLIST_email_reminder_1_user_sent,             CHECKLIST.email_reminder_1_instructor_sent          AS CHECKLIST_email_reminder_1_instructor_sent,             CHECKLIST.email_reminder_2_user_sent                AS CHECKLIST_email_reminder_2_user_sent,             CHECKLIST.email_reminder_2_instructor_sent          AS CHECKLIST_email_reminder_2_instructor_sent        ";                        $limit = ''; //LIMIT 35, 2                # GET THE RECORD        # ======================================================================        $records = $this->SQL->GetArrayAll(array(            'table' => $GLOBALS['TABLE_sessions'],            'keys'  => "$keys",            'where' => "$where $limit",            'joins' => "LEFT JOIN {$GLOBALS['TABLE_session_checklists']}    AS CHECKLIST        ON CHECKLIST.sessions_id        = {$GLOBALS['TABLE_sessions']}.sessions_id                         LEFT JOIN {$GLOBALS['TABLE_contacts']}              AS CUSTOMER         ON CUSTOMER.wh_id               = CHECKLIST.wh_id                         LEFT JOIN {$GLOBALS['TABLE_contacts']}              AS INSTRUCTOR       ON INSTRUCTOR.wh_id             = {$GLOBALS['TABLE_sessions']}.instructor_id                         LEFT JOIN {$GLOBALS['TABLE_timezones']}             AS CUSTOMER_TZ      ON CUSTOMER_TZ.time_zones_id    = CUSTOMER.time_zones_id                         LEFT JOIN {$GLOBALS['TABLE_timezones']}             AS INSTRUCTOR_TZ    ON INSTRUCTOR_TZ.time_zones_id  = INSTRUCTOR.time_zones_id                         ",        ));        if ($this->Show_Query) echo "<br /><b>LAST QUERY =</b> " . $this->SQL->Db_Last_Query;        if ($this->Show_Array) echo "<br /><b>LAST QUERY ARRAY =</b> " . ArrayToStr($records);                        # STORE THE RECORDS        # ======================================================================        if ($records) {            $this->Sessions = $records;        } else {            $this->Output_Message .= "<br />NO RECORDS FOUND";        }    }        public function ProcessRecords()    {        foreach ($this->Sessions as $this->Current_Session) {                        $this->Output_Message .= "<br /><br />SESSION_sessions_id ==> {$this->Current_Session['SESSION_sessions_id']}";                        # send emails - customer            # ---------------------------------------------------            $this->Output_Message .= "<br />({$this->Current_Session['SESSION_utc_start_datetime']} < $this->utc_start_datetime_first_reminder).";            if ($this->Send_First_Reminder_User && ($this->Current_Session['SESSION_utc_start_datetime'] < $this->utc_start_datetime_first_reminder) && $this->Current_Session['CHECKLIST_email_reminder_1_user_sent'] == 0) {                $this->Output_Message .= "<br />FUNCTION :: SendReminderEmailToCustomer('first').";                $this->SendReminderEmailToCustomer('first');            }                        $this->Output_Message .= "<br />({$this->Current_Session['SESSION_utc_start_datetime']} < $this->utc_start_datetime_second_reminder).";            if ($this->Send_Second_Reminder_User && ($this->Current_Session['SESSION_utc_start_datetime'] < $this->utc_start_datetime_second_reminder) && $this->Current_Session['CHECKLIST_email_reminder_2_user_sent'] == 0) {                $this->Output_Message .= "<br />FUNCTION :: SendReminderEmailToCustomer('second').";                $this->SendReminderEmailToCustomer('second');            }                                    # send emails - instructor            # ---------------------------------------------------            $this->Output_Message .= "<br />({$this->Current_Session['SESSION_utc_start_datetime']} < $this->utc_start_datetime_first_reminder).";            if ($this->Send_First_Reminder_Instructor && ($this->Current_Session['SESSION_utc_start_datetime'] < $this->utc_start_datetime_first_reminder) && $this->Current_Session['CHECKLIST_email_reminder_1_instructor_sent'] == 0) {                $this->Output_Message .= "<br />FUNCTION :: SendReminderEmailToInstructor('first').";                $this->SendReminderEmailToInstructor('first');            }                        $this->Output_Message .= "<br />({$this->Current_Session['SESSION_utc_start_datetime']} < $this->utc_start_datetime_second_reminder).";            if ($this->Send_Second_Reminder_Instructor && ($this->Current_Session['SESSION_utc_start_datetime'] < $this->utc_start_datetime_second_reminder) && $this->Current_Session['CHECKLIST_email_reminder_2_instructor_sent'] == 0) {                $this->Output_Message .= "<br />FUNCTION :: SendReminderEmailToInstructor('second').";                $this->SendReminderEmailToInstructor('second');            }                    }    }                # EMAIL SENDING FUNCTIONS    # ====================================================================        private function SendReminderEmailToCustomer($type)    {        $record = $this->Current_Session;                switch ($type) {            default:            case 'first':                $db_field = 'email_reminder_1_user_sent';            break;            case 'second':                $db_field = 'email_reminder_2_user_sent';            break;        }                        # INITIALIZE THE EMAIL CLASS        # =====================================================        global $ROOT;        require_once "$ROOT/phplib/swift4/swift_required.php";        $MAIL = new Email_MailWh;                        # MAKE SESSION CONTENT && PREP THE SWAP ARRAY        # =====================================================        $swap_array = array (            '@@login_url@@'         => $GLOBALS['URL_SITE_LOGIN'],            '@@session_info@@'      => $this->MakeContentForEmail_SessionInfo($record['CUSTOMER_timezone_name'], $record['CUSTOMER_timezone_display']),            '@@customer_info@@'     => $this->MakeContentForEmail_CustomerInfo(),            '@@instructor_info@@'   => '', //$Email_Content_Instructor_Info,        );                        # PREP THE MESSAGE ARRAY        # =====================================================        $to_name    = ($this->Send_Emails_As_Test) ? $this->Email_Test_To_Name : "{$record['CUSTOMER_first_name']} {$record['CUSTOMER_last_name']}";        $to_email   = ($this->Send_Emails_As_Test) ? $this->Email_Test_To_Email : $record['CUSTOMER_email_address'];        $bcc        = ($this->email_bcc_to_admin) ? $GLOBALS['EMAIL_ADMIN_EMAIL'] : '';        $MAIL->PrepareMailToSend(array(            'email_template_id'     => $this->customer_email_template_id,            'swap_array'            => $swap_array,            'to_name'               => $to_name,            'to_email'              => $to_email,            'bcc'                   => $bcc,            'wh_id'                 => $record['CUSTOMER_wh_id'],        ));                        # SEND THE PREPARED MESSAGE        # =====================================================        if ($this->Send_Emails) {            if ($MAIL->MailPrepared()) {                $this->Output_Message .= "<br />Message send to CUSTOMER.";                                if ($this->Update_Database_As_Test) {                    $key_values = "`$db_field`=3";                } else {                    $key_values = "`$db_field`=1";                }            } else {                $this->Output_Message .= "<br />Unable to send message to CUSTOMER.";                $key_values = "`$db_field`=9";            }        } else {            $this->Output_Message .= "<br />(CUSTOMER) Bypass sending emails - database will be updated with a '2'.";            $key_values = "`$db_field`=2";        }                        # UPDATE THE CHECKLIST        # ==============================================================        if ($this->Update_Database) {            $result = $this->SQL->UpdateRecord(array(                'table'         => $GLOBALS['TABLE_session_checklists'],                'key_values'    => $key_values,                'where'         => "`sessions_id`={$record['SESSION_sessions_id']}",            ));            if ($this->Show_Query) $this->Output_Message .= '<br /><br />QUERY => ' . $this->SQL->Db_Last_Query;            if ($result) {                $this->Output_Message .= "<br />(CUSTOMER) Database updated.";            } else {                $this->Output_Message .= "<br />(CUSTOMER) FAILED to update database.";            }        } else {            $this->Output_Message .= "<br />(CUSTOMER) Bypass updating database.";        }            }        private function SendReminderEmailToInstructor($type)    {        $record = $this->Current_Session;                switch ($type) {            default:            case 'first':                $db_field = 'email_reminder_1_instructor_sent';            break;            case 'second':                $db_field = 'email_reminder_2_instructor_sent';            break;        }                        # INITIALIZE THE EMAIL CLASS        # =====================================================        global $ROOT;        require_once "$ROOT/phplib/swift4/swift_required.php";        $MAIL = new Email_MailWh;                        # MAKE SESSION CONTENT && PREP THE SWAP ARRAY        # =====================================================        $swap_array = array (            '@@login_url@@'         => $GLOBALS['URL_SITE_LOGIN'],            '@@session_info@@'      => $this->MakeContentForEmail_SessionInfo($record['INSTRUCTOR_timezone_name'], $record['INSTRUCTOR_timezone_display']),            '@@customer_info@@'     => $this->MakeContentForEmail_CustomerInfo(),            '@@instructor_info@@'   => '', //$Email_Content_Instructor_Info,        );                        # PREP THE MESSAGE ARRAY        # =====================================================        $to_name    = ($this->Send_Emails_As_Test) ? $this->Email_Test_To_Name : "{$record['INSTRUCTOR_first_name']} {$record['INSTRUCTOR_last_name']}";        $to_email   = ($this->Send_Emails_As_Test) ? $this->Email_Test_To_Email : $record['INSTRUCTOR_email_address'];        $bcc        = ($this->email_bcc_to_admin) ? $GLOBALS['EMAIL_ADMIN_EMAIL'] : '';        $MAIL->PrepareMailToSend(array(            'email_template_id'     => $this->customer_email_template_id,            'swap_array'            => $swap_array,            'to_name'               => $to_name,            'to_email'              => $to_email,            'bcc'                   => $bcc,            'wh_id'                 => $record['INSTRUCTOR_wh_id'],        ));                        # SEND THE PREPARED MESSAGE        # =====================================================        if ($this->Send_Emails) {            if ($MAIL->MailPrepared()) {                $this->Output_Message .= "<br />Message send to INSTRUCTOR.";                                if ($this->Update_Database_As_Test) {                    $key_values = "`$db_field`=3";                } else {                    $key_values = "`$db_field`=1";                }            } else {                $this->Output_Message .= "<br />Unable to send message to INSTRUCTOR.";                $key_values = "`$db_field`=9";            }        } else {            $this->Output_Message .= "<br />(INSTRUCTOR) Bypass sending emails - database will be updated with a '2'.";            $key_values = "`$db_field`=2";        }                        # UPDATE THE CHECKLIST        # ==============================================================        if ($this->Update_Database) {            $result = $this->SQL->UpdateRecord(array(                'table'         => $GLOBALS['TABLE_session_checklists'],                'key_values'    => $key_values,                'where'         => "`sessions_id`={$record['SESSION_sessions_id']}",            ));            if ($this->Show_Query) $this->Output_Message .= '<br /><br />QUERY => ' . $this->SQL->Db_Last_Query;            if ($result) {                $this->Output_Message .= "<br />(INSTRUCTOR) Database updated.";            } else {                $this->Output_Message .= "<br />(INSTRUCTOR) FAILED to update database.";            }        } else {            $this->Output_Message .= "<br />(INSTRUCTOR) Bypass updating database.";        }            }            private function MakeContentForEmail_SessionInfo($TIMEZONE, $TIMEZONE_DISPLAY)    {        # ========================================================================        # FUNCTION :: Create the output for how the session will be displayed        # ========================================================================                $USER_LOCAL_TIMEZONE = $TIMEZONE;                global $USER_DISPLAY_DATE, $USER_DISPLAY_TIME, $USER_DISPLAY_DATE_CALC;        $input_date_time        = $this->Current_Session['SESSION_utc_start_datetime'];        $input_timezone         = 'UTC';        $output_timezone        = $USER_LOCAL_TIMEZONE;        $output_format          = "$USER_DISPLAY_DATE|$USER_DISPLAY_TIME";        $user_start_datetime    = $this->OBJ_TIMEZONE->ConvertDateTimeBetweenTimezones($input_date_time, $input_timezone, $output_timezone, $output_format);        $parts                  = explode('|', $user_start_datetime);        $user_start_date        = $parts[0];        $user_start_time        = $parts[1];        $input_date_time        = $this->Current_Session['SESSION_utc_end_datetime'];        $input_timezone         = 'UTC';        $output_timezone        = $USER_LOCAL_TIMEZONE;        $output_format          = "$USER_DISPLAY_DATE_CALC|$USER_DISPLAY_TIME";        $user_end_datetime      = $this->OBJ_TIMEZONE->ConvertDateTimeBetweenTimezones($input_date_time, $input_timezone, $output_timezone, $output_format);        $parts                  = explode('|', $user_end_datetime);        $user_end_date          = $parts[0];        $user_end_time          = $parts[1];                $data = array(            "ID:|{$this->Current_Session['SESSION_sessions_id']}",            "DATE:|{$user_start_date}",            "TIME:|{$user_start_time} - {$user_end_time}",            "|($TIMEZONE_DISPLAY)",        );        $box_content    = MakeTable($data);        $output         = AddBox_Type1('SESSION INFORMATION', $box_content);                return $output;    }        private function MakeContentForEmail_CustomerInfo()    {        $record = $this->Current_Session;            $name = ucwords(strtolower("{$record['CUSTOMER_first_name']} {$record['CUSTOMER_last_name']}"));        $data = array(            "NAME:|{$name}",        );        $box_content    = MakeTable($data);        $output         = AddBox_Type1('CUSTOMER INFORMATION', $box_content);                return $output;    }        private function MakeContentForEmail_InstructorInfo()    {        $record = $this->Current_Session;            $name = ucwords(strtolower("{$record['INSTRUCTOR_last_name']} {$record['INSTRUCTOR_last_name']}"));        $data = array(            "NAME:|{$name}",        );        $box_content    = MakeTable($data);        $output         = AddBox_Type1('INSTRUCTOR INFORMATION', $box_content);                return $output;    }            } // end class