<?phpclass Cron_SessionUnlock{    public $Show_Query          = true;     // TRUE = output the database queries    public $Show_Query_Result   = true;     // TRUE = output the database query results        public $Allow_Execute       = true;     // TRUE = allows cron to run    public $Update_Database     = false;    // TRUE = updates database to unlock session        public $Sessions            = array();    public $SQL                 = null;            public function  __construct()    {        $this->ClassInfo = array(            'Created By'  => 'Richard Witherspoon',            'Created'     => '2011-01-01',            'Updated By'  => '',            'Created'     => '',            'Version'     => '1.0',            'Description' => 'Releases sessions that have bene locked beyond a specified time',        );                $this->SQL = Lib_Singleton::GetInstance('Lib_Pdo'); // Get instance of database object - don't need if extending BaseClass    }        public function Execute() {        if ($this->Allow_Execute) {            $this->GetAllSessions();            $this->UnlockAllSessions();        }    }        public function GetAllSessions()    {        # FUNCTION :: Get all locked sessions that haven't been booked yet                # ---------- get the records ----------        $records = $this->SQL->GetArrayAll(array(            'table' => $GLOBALS['TABLE_sessions'],            'keys'  => "sessions_id, locked, locked_wh_id, locked_start_datetime",            'where' => "`locked`=1 AND `booked`=0 AND active=1",        ));                if ($this->Show_Query) echo "<br />LAST QUERY = " . $this->SQL->Db_Last_Query;        if ($this->Show_Query_Result && $records) echo "<br />LAST QUERY RESULT = " . ArrayToStr($records);                # ---------- store the records ----------        if ($records) {            $this->Sessions = $records;        }    }        public function UnlockAllSessions()    {        # FUNTION :: Loop through all sessions and unlock them                echo "<br /> count ===> " . count($this->Sessions);            foreach ($this->Sessions as $session) {                    if (false) {                echo "<br />";                echo ArrayToStr($session);                echo "<br />";            }                        if (false) {                echo "<br />sessions_id ===> " . $session['sessions_id'];                echo "<br />locked ===> " . $session['locked'];                echo "<br />locked_wh_id ===> " . $session['locked_wh_id'];                echo "<br />locked_start_datetime ===> " . $session['locked_start_datetime'];                echo "<br /><br />";            }                                    # ===== CHECK IF SESSION NEEDS TO BE RELEASED =====            $session_id = 0;                                    # ---------- update the database record ----------            if ($this->Update_Database) {                $this->UnlockSingleSession($session_id);            }        }    }        public function UnlockSingleSession($SESSIONS_ID)    {        # FUNCTION :: DO the database call to unlock session                if ($this->Update_Database) {            $key_values = $this->FormatDataForUpdate(array(                'locked' => 0,                'locked_wh_id' => '',                'locked_start_datetime' => '',            ));            $record = $this->SQL->UpdateRecord(array(                'table'         => $GLOBALS['TABLE_sessions'],                'key_values'    => $key_values,                'where'         => "`sessions_id`='{$SESSIONS_ID}' AND active=1",            ));            if ($this->show_query) echo "<br />LAST QUERY = " . $this->SQL->Db_Last_Query;        }    }    } // end class