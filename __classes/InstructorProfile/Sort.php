<?phpclass InstructorProfile_Sort extends BaseClass{    # ====================================================================    # CLASS :: Used to sort instructors    # ====================================================================        public $Show_Query              = false;        public function  __construct()    {        parent::__construct();                            } // ---------- end construct -----------        public function Execute()    {        $this->AddStyle();        $this->AddScript();        $this->GetAllInstructorForSort();    }        public function ExecuteAjax()    {                #echo "<br />action => $action<br /><br />";        #echo "<br />get ==> " . ArrayToStr($_GET);        #echo "<br />post ==> " . ArrayToStr($_POST);        #echo "<br />post ITEM ==> " . ArrayToStr($_POST['item']);        #echo "<br />post ITEM ==> " . ArrayToStr(unserialize($_POST['id']));        #echo "<br />post ==> " . ArrayToStr($_POST['order']);        #echo "<br />order ==> " . $_POST['order'];        #echo "<br />items ==> " . ArrayToStr($items);                        $return = '';                switch (Get('action')) {            case 'sort':                                # CREATE THE ARRAY THE IS PROCESSABLE                $items = array();                $order = 1;                $parts = explode('item[]=', $_POST['order']);                foreach ($parts as $part) {                    if ($part) {                        $key = intonly($part);                        $items[$key] = $order;                        $order++;                    }                }                                # RUN ALL OF THE SORTS                $passed = true;                foreach($items as $id => $order) {                    $id     = intonly($id);                    $order  = intonly($order);                    $id_val = $GLOBALS['TABLE_instructor_profile'] . '_id';                                        $result = $this->SQL->UpdateRecord(array(                        'table'         => $GLOBALS['TABLE_instructor_profile'],                        'key_values'    => "`sort_order`='{$order}'",                        'where'         => "`{$id_val}`='{$id}'",                                            ));                    $passed = (!$result) ? false : $passed;                }                $return = ($passed) ? 1 : 0;            break;        }                echo $return;    }    public function GetAllInstructorForSort()    {        $output = '';        $Where = '';                $records = $this->SQL->GetArrayAll(array(            'table' => $GLOBALS['TABLE_instructor_profile'],            'keys'  => '*',            'where' => "`display`=1 AND `active`=1 $Where",            'order' => '`sort_order` ASC',        ));        if ($this->Show_Query) $output .= '<br />' . $this->SQL->Db_Last_Query;                        if ($records) {            $output .= '<ul id="sortable">';            foreach ($records AS $record) {                                $id_val     = $GLOBALS['TABLE_instructor_profile'] . '_id';                $id         = $record[$id_val];                $picture    = ($record['primary_pictures_id']) ? "<img src='/office/{$record['primary_pictures_id']}' alt='' border='0' width='' height='50' />" : $Instructor_Logo_Gap;                $name       = "{$record['first_name']} {$record['last_name']}";                                $output    .= "<li id='item_{$id}' class='ui-state-default' style='min-width:200px;'><span class='ui-icon ui-icon-arrowthick-2-n-s'></span>{$picture}{$name}</li>";                            }            $output .= '</ul>';        }                echo $output;            }    public function AddStyle()    {        AddStyle("            #sortable {                list-style-type: none;                margin: 0;                padding: 0;                /*width: 60%;*/            }            #sortable li {                margin: 0 3px 3px 3px;                padding: 0.4em;                padding-left: 1.5em;                font-size: 1.4em;                /*height: 18px;*/            }            #sortable li span {                position: absolute;                margin-left: -1.3em;            }        ");    }        public function AddScript()    {        AddScriptInclude("https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.min.js");                $link   = getClassExecuteLink(EncryptQuery("class=InstructorProfile_Sort;"));        $SCRIPT = <<<SCRIPT                        $("#sortable").sortable({                placeholder: 'ui-state-highlight',                stop: function(i) {                    placeholder: 'ui-state-highlight',                    $.ajax({                        type: "POST",                        url: "{$link};action=sort;",                        data: { order: $("#sortable").sortable("serialize") },                        success: function( result ) {                                if (result == 1) {                                    //alert('Instructors have been re-ordered');                                } else {                                    alert('Failed to re-order instructors');                                }                            }                    });                }            });            $("#sortable").disableSelection();            SCRIPT;        AddScriptOnReady($SCRIPT);    }        } //end class