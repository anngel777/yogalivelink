package com.influxis.fms.controls {	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.NetStatusEvent;	import flash.media.Camera;	import flash.media.Microphone;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.net.Responder;			public class NetController extends EventDispatcher	{		public static const CONNECTED:String = 			"connected";		public static const DISCONNECTED:String = 		"disconnected";				public var nc:NetConnection;		public var path:String;		public var localUserID:String;		public var localUserIP:String;		public var isSyncronized:Boolean = 			false;				protected var _externalParts:Array;				public function NetController() 		{			this.init();		};				public function init():void		{			if( _externalParts == null ) _externalParts = new Array();						nc = new NetConnection();			nc.addEventListener( NetStatusEvent.NET_STATUS, onCon );			nc.client = {};		}				protected function onCon( p_e:NetStatusEvent ):void		{			var code:String = p_e.info.code;			tracer("connection: "+code);			switch( code ){				case "NetConnection.Connect.Success":					nc.call( "connect", new Responder( onUserData, onUserDataFail ) );					break;				case "NetConnection.Connect.Closed":					dispatchEvent( new Event( NetController.DISCONNECTED ) );					isSyncronized = false;					break;			}		}				protected function onUserData( p_o:Object ):void		{			//tracer("onUserData "+p_o.id);			this.localUserID = p_o.id;			this.localUserIP = p_o.ip;						if( !isSyncronized ){				//update our external parts.				for( var i:int=0; i<this._externalParts.length; i++ ){					var item:* = this._externalParts[i]					item.userData( p_o );					item.connect( this.nc );				}				dispatchEvent( new Event( NetController.CONNECTED ) );				isSyncronized = true;			}		};				protected function onUserDataFail( p_o:Object ):void		{			tracer("onUserDataFail "+p_o);		};						//PUBLIC				public function connect( p_Path:String=null ):void		{			if( p_Path != null ) path = p_Path;			nc.connect( this.path );		}				public function connectToNetwork( p_a:Array ):void		{			this._externalParts = p_a;		};				private function tracer( p_msg:* ):void		{			trace("#NetController#  "+p_msg);		}	}	}